"use strict";(self.webpackChunkprod=self.webpackChunkprod||[]).push([[4134],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),k=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=k(e.components);return r.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=k(n),u=a,p=g["".concat(o,".").concat(u)]||g[u]||m[u]||s;return n?r.createElement(p,i(i({ref:t},d),{},{components:n})):r.createElement(p,i({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=g;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var k=2;k<s;k++)i[k]=n[k];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6678:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return l},metadata:function(){return k},toc:function(){return m}});var r=n(3117),a=n(102),s=(n(7294),n(3905)),i=["components"],l={description:"UiOs nye integrasjonsarkitektur er basert p\xe5 teknologi kalt\xa0**Webservice**. Dette dokumentet forklarer grunnen for dette teknologivalget, hvordan Webservice (WS) passer inn i arkitekturen og gir retningslinjer for hvordan man best realiserer en WS for sin tjeneste.",title:"Webservice \u2013 hva og hvordan"},o="Webservice \u2013 hva og hvordan",k={unversionedId:"datadeling/god-praksis/bruk-av-webservice",id:"datadeling/god-praksis/bruk-av-webservice",title:"Webservice \u2013 hva og hvordan",description:"UiOs nye integrasjonsarkitektur er basert p\xe5 teknologi kalt\xa0**Webservice**. Dette dokumentet forklarer grunnen for dette teknologivalget, hvordan Webservice (WS) passer inn i arkitekturen og gir retningslinjer for hvordan man best realiserer en WS for sin tjeneste.",source:"@site/docs/datadeling/god-praksis/bruk-av-webservice.md",sourceDirName:"datadeling/god-praksis",slug:"/datadeling/god-praksis/bruk-av-webservice",permalink:"/datadeling-docs-tmp/docs/datadeling/god-praksis/bruk-av-webservice",editUrl:"https://github.com/jokim/datadelingsdokumentasjon/tree/master/docs/datadeling/god-praksis/bruk-av-webservice.md",tags:[],version:"current",frontMatter:{description:"UiOs nye integrasjonsarkitektur er basert p\xe5 teknologi kalt\xa0**Webservice**. Dette dokumentet forklarer grunnen for dette teknologivalget, hvordan Webservice (WS) passer inn i arkitekturen og gir retningslinjer for hvordan man best realiserer en WS for sin tjeneste.",title:"Webservice \u2013 hva og hvordan"},sidebar:"tutorialSidebar",previous:{title:"API-design",permalink:"/datadeling-docs-tmp/docs/datadeling/god-praksis/api-design/"},next:{title:"Anbefalinger for god datakvalitet",permalink:"/datadeling-docs-tmp/docs/datadeling/god-praksis/datakvalitet/"}},d={},m=[{value:"Hva er en Webservice(WS)?",id:"hva-er-en-webservicews",level:2},{value:"Hva er hensikten?",id:"hva-er-hensikten",level:2},{value:"Dagens situasjon",id:"dagens-situasjon",level:3},{value:"En WS-basert modell",id:"en-ws-basert-modell",level:3},{value:"API manager",id:"api-manager",level:3},{value:"Meldingsk\xf8 (MQ)",id:"meldingsk\xf8-mq",level:3},{value:"Hvem m\xe5 ha\xa0en WS?",id:"hvem-m\xe5-haen-ws",level:2},{value:"Autoritativ kilde",id:"autoritativ-kilde",level:3},{value:"Datalager",id:"datalager",level:3},{value:"Hvordan skal\xa0et API i en WS se ut?",id:"hvordan-skalet-api-i-en-ws-se-ut",level:2},{value:"RESTful",id:"restful",level:3},{value:"Niv\xe5 0: RPC over HTTP",id:"niv\xe5-0-rpc-over-http",level:4},{value:"Niv\xe5 1: Ressurser",id:"niv\xe5-1-ressurser",level:4},{value:"Niv\xe5 2: HTTP verb",id:"niv\xe5-2-http-verb",level:4},{value:"Niv\xe5 3:\xa0Hypermedia Controls/HATEOAS",id:"niv\xe5-3hypermedia-controlshateoas",level:4},{value:"Entitetsbasert API",id:"entitetsbasert-api",level:3},{value:"Funksjonelt API",id:"funksjonelt-api",level:3}],g={toc:m};function u(e){var t=e.components,l=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},g,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"webservice--hva-og-hvordan"},"Webservice \u2013 hva og hvordan"),(0,s.kt)("p",null,"UiOs nye integrasjonsarkitektur er basert p\xe5 teknologi kalt\xa0",(0,s.kt)("strong",{parentName:"p"},"Webservice"),". Dette dokumentet forklarer grunnen for dette teknologivalget, hvordan Webservice (WS) passer inn i arkitekturen og gir retningslinjer for hvordan man best realiserer en WS for sin tjeneste."),(0,s.kt)("h2",{id:"hva-er-en-webservicews"},"Hva er en Webservice(WS)?"),(0,s.kt)("p",null,"En ",(0,s.kt)("strong",{parentName:"p"},"Webservice")," (",(0,s.kt)("strong",{parentName:"p"},"WS"),') er en del av en tjeneste eller system som tilbyr lese- og/eller skrivetilgang til tjenesten eller systemet vha. webbasert teknologi. En WS kan v\xe6re en integrert del av tjenesten (heretter vil "tjeneste" dekke b\xe5de system og tjeneste), en modul til tjenesten eller en l\xf8srevet komponent som har et eget livsl\xf8p. Felles for alle variasjoner er at de gir et\xa0standardisert grensesnitt til \xe5 lese og/eller skrive data som ligger i tjenesten.\xa0'),(0,s.kt)("p",null,"En WS tilbyr ett eller flere\xa0",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Application_programming_interface"},"API-er"),'\xa0som tilbyr\xa0funksjoner opp mot tjenesten. Funksjonene kan v\xe6re n\xe6rmest hva som helst, men som regel er de av typen "hent data fra kilden".\xa0'),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(1800).Z,width:"866",height:"428"}),"\n",(0,s.kt)("em",{parentName:"p"},"Konsumenter sp\xf8r kildens WS om data. Flere konsumenter benytter den samme WS-en da WS-ens API tilbyr funksjonalitet som dekker alle konsumentenes behov.")),(0,s.kt)("h2",{id:"hva-er-hensikten"},"Hva er hensikten?"),(0,s.kt)("h3",{id:"dagens-situasjon"},"Dagens situasjon"),(0,s.kt)("p",null,'Hensikten med \xe5 g\xe5 over p\xe5 en WS-basert integrasjonsarkitektur er prim\xe6rt \xe5 kvitte seg med flaskehalser i organisasjonen, samt forhindre dobbeltarbeid. Mange av UiOs integrasjoner er basert p\xe5 en s\xe5kalt "hub&spoke"-modell der datakilden er ansvarlig for \xe5 levere fra seg\xa0de data som en konsument trenger. \xc5rsakene til at dette har blitt en s\xe5 vanlig modell for integrasjon er mange, der de viktigste er:'),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"sikkerhet - kun de ansvarlige for kilden skal f\xe5 tilgang til dataene i kilden"),(0,s.kt)("li",{parentName:"ul"},"kompleksitet - kun de ansvarlige for kilden forst\xe5r datamodellen i kilden"),(0,s.kt)("li",{parentName:"ul"},"sentralisering - som en f\xf8lge av sentralisering av data s\xe5 blir integrasjonene ogs\xe5 sentraliserte"),(0,s.kt)("li",{parentName:"ul"},'tradisjon - slik at man "alltid" gjort integrasjon')),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(6866).Z,width:"826",height:"622"}),"\nKilden er ansvarlig for \xe5 gi konsumentene data. Ofte gj\xf8res dette ved at komponenter i kilden genererer filer som sendes til konsumenten",(0,s.kt)("em",{parentName:"p"},".")),(0,s.kt)("p",null,'Det er store utfordringer knyttet til en slik "hub&spoke"-modell. Sentralisering av data er et veldig fornuftig valg for \xe5 bekjempe d\xe5rlig datakvalitet og sikre en autoritativ kilde som konsumenter kan forholde seg til. Sentralisering av integrasjonene nyter ikke de samme godene:'),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"De tekniske ressursene tilknyttet kilden blir bundet opp i enkeltprosjekter, andre prosjekter m\xe5 vente."),(0,s.kt)("li",{parentName:"ul"},"En endring ute i en konsument medf\xf8rer at ressurser m\xe5 endre p\xe5 kilden."),(0,s.kt)("li",{parentName:"ul"},"Kilden m\xe5 alltid ha mange\xa0tekniske ressurser tilknyttet for \xe5 klare arbeidsmengden."),(0,s.kt)("li",{parentName:"ul"},"Prosjekter f\xe5r store skjulte kostnader fordi ressurser i kilden m\xe5 gj\xf8re integrasjonen."),(0,s.kt)("li",{parentName:"ul"},"Prosjekter blir forsinket da det sjelden er nok tekniske ressurser tilknyttet kilden og ingen andre enn disse ressursene kan gj\xf8re integrasjonen.")),(0,s.kt)("h3",{id:"en-ws-basert-modell"},"En WS-basert modell"),(0,s.kt)("p",null,'To av problemene som har medf\xf8rt at "hub&spoke"-modellen har blitt s\xe5 utbredt er sikkerhet og kompleksitet. Uten grensesnitt som adresserer disse problemene s\xe5 vil det v\xe6re vanskelig \xe5 gj\xf8re en omfattende endring i hvordan UiO gj\xf8r integrasjon. Sikkerhetsproblemet best\xe5r i hovedsak at systemeiere ikke vil tillate andre tilganger rett i databaser eller til API-er inne i tjenesten. Det er lite eller ingen tilgangskontroll s\xe5 skal noen ha tilgang til noe s\xe5 f\xe5r de det til alt - gjerne ogs\xe5 muligheten til \xe5 endre data.\xa0'),(0,s.kt)("p",null,"Kompleksitetsproblemene er ofte at internt i en tjeneste s\xe5 er data strukturert p\xe5 en slik m\xe5te at de gir mening for systemeiere og ressurser tilknyttet tjenesten, men ikke utenforst\xe5ende. S\xe5 selv om man gir tilgang til en kilde s\xe5 betyr ikke det at konsumenten skj\xf8nner hva kilden tilbyr eller f\xe5r gale data."),(0,s.kt)("p",null,"Dette kan l\xf8ses som en del av WS-modellen:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(2456).Z,width:"844",height:"598"}),"\nKilden tilby et API som forenkler de interne datastrukturene til noe forst\xe5elig og funksjonelt for utenforst\xe5ende. Konsumentene f\xe5r kun tilgang til de funksjonene som avtales p\xe5 forh\xe5nd."),(0,s.kt)("p",null,"Hvordan API-et utformes i WS-en vil adressere kompleksitetsproblemene som nevnt. Hvis konsumenter trenger \xe5 finne alle kontoer p\xe5 UiO s\xe5 kan API-et tilby en vasket liste der alle aktive konti som oppfyller kravene vises. Interne data, som ikke er interessante for andre enn systemeier, vises ikke.\xa0"),(0,s.kt)("p",null,"Systemeier for kilden og de tekniske ressursene tilknyttet kilden vil v\xe6re ansvarlige for \xe5 tilby et API som gir konsumenter de data som konsumentene trenger. I oppstart av WS-basert integrasjon vil kostnaden knyttet til integrasjon v\xe6re likt med tidligere m\xe5ter \xe5 integrere p\xe5. Det er n\xe5r WS-en allerede tilbyr et rikt API at systemeier vil se gevinsten i mindre behov for \xe5 bruke ressurser p\xe5 integrasjon \u2013 prosjektene vil selv kunne skaffe data gjennom WS-en. Prosjektene kan budsjettere med tid og ressurser for integrasjon uten at kilden er en flaskehals."),(0,s.kt)("h3",{id:"api-manager"},"API manager"),(0,s.kt)("p",null,"En API manager, ogs\xe5 kalt API gateway, er en tjeneste for \xe5 kontrollere og styre tilganger til API-er. Tjenesten sikrer at konsumenter er de de utgir seg for \xe5 v\xe6re (autentisering) og holder rede p\xe5 de tilganger konsumentene skal ha (autorisasjon)."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(934).Z,width:"1092",height:"424"}),"\nKildens WS tilbyr en rekke datauttrekk i form av et API. API manager er tjenesten som tilgangsstyrer uttrekkene slik at konsumentene kun har tilgang til avtalte deler av API-et."),(0,s.kt)("p",null,"Ved \xe5 sentralisere tilgangsstyringen av API-er s\xe5 h\xf8ster vi en rekke fordeler:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Ett sentralt punkt for tilgangsstyring",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"bestilling av flere tilganger i flere API-er kun ett sted"),(0,s.kt)("li",{parentName:"ul"},"forvaltning av tilganger i flere kilder kun ett sted"))),(0,s.kt)("li",{parentName:"ul"},"Sentral oversikt over dataflyt",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"bedre sikkerhet"),(0,s.kt)("li",{parentName:"ul"},"oversikt over hele virksomheten"))),(0,s.kt)("li",{parentName:"ul"},"Ett punkt for integrasjon",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"konsumenter m\xe5 ikke lete etter ulike API-er"),(0,s.kt)("li",{parentName:"ul"},"konsumenter kan integrere en gang, ulike kilder gir tilgang")))),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(4864).Z,width:"1036",height:"514"}),"\nEksempel p\xe5 en konsument som trenger data fra flere kilder. Konsumenten forholder seg kun til API manager. Mellom kildene og API manager forvalter systemeierne de faktiske tilgangene."),(0,s.kt)("h3",{id:"meldingsk\xf8-mq"},"Meldingsk\xf8 (MQ)"),(0,s.kt)("p",null,"En meldingsk\xf8 (MQ) er en tjeneste som gir kilder\xa0mulighet til \xe5 sende beskjed om at data er endret. I gamle hub & spoke-integrasjoner baserer man seg i stor grad p\xe5 fulldumper \u2013 alts\xe5 filer med alle data en konsument trenger. Dette er kostbart, s\xe5rbart og tregt. Med en meldingsk\xf8 er tanken at en kilde sender ut en notifikasjon n\xe5r data har endret seg, som er av interesse for konsumenter. Notifikasjonen er ikke n\xf8dvendigvis informasjonsb\xe6rende nok til at konsumenten kan foreta en endring, men forteller konsumenten at den m\xe5 hente data p\xe5 nytt for \xe5 sjekke egne data mot den autoritative kilden. Dette gj\xf8res med en URL til den ber\xf8rte enheten."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(7832).Z,width:"1024",height:"510"}),"\nNotifikasjoner sendes fra kildene inn til meldingsk\xf8en. Konsumentene velger selv hvilke notifikasjoner de \xf8nsker \xe5 abonnere p\xe5. Konsumenten nede til h\xf8yre abonnerer p\xe5 notifikasjoner fra alle tre kildene i eksemplet."),(0,s.kt)("p",null,"Notifikasjoner skal\xa0ikke inneholde utfyllende informasjon fordi man \xf8nsker liberale regler rundt abonnement p\xe5 notifikasjoner. Flyter f\xf8dselsnummer eller sensitiv informasjon i notifikasjoner s\xe5 m\xe5 tilgangskontrollen p\xe5 notifikasjoner v\xe6re strengt regulert. Er notifikasjonene kun en indikator p\xe5 at noe har skjedd med en enhet s\xe5 vil tilgangskontrollen kunne gj\xf8res ene og alene mot WS-en."),(0,s.kt)("p",null,"MQ, som beskrevet i arkitekturen og i dette dokumentet, er en sentral tjeneste. Andre meldingsk\xf8er kan eksistere i virksomheten uten at de faller inn under arkitekturen. Sammenhengen mellom API manager, WS og MQ forklares lenger ned i dokumentet."),(0,s.kt)("h2",{id:"hvem-m\xe5-haen-ws"},"Hvem m\xe5 ha\xa0en WS?"),(0,s.kt)("p",null,"Det er ikke slik at alle tjenester m\xe5 ha en WS i den nye integrasjonsarkitekturen. Kravet om WS inntreffer hovedsaklig n\xe5r en kilde sitter p\xe5 data som andre tjenester vil lese og eller skrive. Har kilden sv\xe6rt f\xe5 integrasjoner og dette ikke vil \xf8ke i fremtiden s\xe5 vil integrasjonsarkitekturprinsippene heller ikke kreve en WS foran kilden. Det gir for lite avkastning p\xe5 investeringen."),(0,s.kt)("p",null,"WS vil v\xe6re enten p\xe5krev eller sv\xe6rt nyttig der tjenesten er en autoritativ kilde for data som andre trenger innsyn i, eller der tjenesten fungerer som en del av en annen tjeneste.\xa0"),(0,s.kt)("h3",{id:"autoritativ-kilde"},"Autoritativ kilde"),(0,s.kt)("p",null,"Mange av integrasjonene p\xe5 UiO kommer av at\xa0tjenester\xa0trenger noe data fra en autoritativ kilde. Eksempler er lister av alle personer, konti\xa0eller grupper. Hva disse dataene brukes til videre er forskjellig, men likhetstrekkene for selve integrasjonen er s\xe5 markant at man f\xe5r store fordeler av \xe5 modernisere og standardisere prosessen."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(533).Z,width:"814",height:"434"}),"\nKilden sender en notifikasjon til en meldingsk\xf8(MQ) som videresender denne til konsumenter som abonnerer p\xe5 denne typen notifikasjoner. Notifikasjonen sier at konsumenten m\xe5 hente data om en entitet for \xe5 se om endringen skal reflekteres i konsumenten."),(0,s.kt)("p",null,"En tenkt flyt i modellen over er:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},'Kilde sender notifikasjon med innhold "person 123 er endret" til MQ som f\xf8lge av at et telefonnummer er endret.'),(0,s.kt)("li",{parentName:"ol"},"MQ videresender notifikasjonen til de konsumenter som abonnerer p\xe5 denne typen notifikasjoner fra kilden."),(0,s.kt)("li",{parentName:"ol"},"Konsumenten f\xe5r beskjed om at person 123 har en ukjent endring."),(0,s.kt)("li",{parentName:"ol"},"Konsumenten kontakter API manager, som styrer tilgangen til WS-en til kilden, for \xe5 sp\xf8rre om personobjektet 123."),(0,s.kt)("li",{parentName:"ol"},"Alle kall til API manager, og som er forh\xe5ndsgodkjent, videresendes til WS-en."),(0,s.kt)("li",{parentName:"ol"},"WS-en returnerer personobjektet 123, med det oppdaterte telefonnummeret."),(0,s.kt)("li",{parentName:"ol"},"Konsumenten sammenligner nye og gamle data og oppdaterer telefonnummeret.")),(0,s.kt)("h3",{id:"datalager"},"Datalager"),(0,s.kt)("p",null,"Integrasjoner er ikke alltid det \xe5 flytte data fra A til B, alts\xe5 replisering av data. Sammensatte tjenester der man utnytter en tjenesteorientert arkitektur vil kunne bygge p\xe5 andre tjenester. Et eksempel p\xe5 dette kan v\xe6re at en tjeneste velger \xe5 integrere med en kilde med den hensikt \xe5 benytte kilden som en del av sitt datalager. Tjenesten kunne integrert som over og replisert data om f.eks. personer, grupper eller kalenderdata, men man kan ogs\xe5 g\xe5 direkte til kilden (bokstavelig talt) og jobbe direkte p\xe5 kildedataene."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:n(9908).Z,width:"566",height:"810"}),"\nEn tjeneste, best\xe5ende av et brukergrensesnitt, et logisk lag og en database, benytter en ekstern kilde som en del av sitt datalag."),(0,s.kt)("p",null,"I et slikt scenario s\xe5 kan det v\xe6re krav til WS-en i kilden om \xe5 tilby skrivemuligheter. Man kan se for seg at personpresentasjonen p\xe5 UiOs nettsider vil v\xe6re redigerbare for personer som er innlogget og disse dataene b\xe5de hentes fra UiOs HR-system, samt blir skrevet tilbake hvis personen redigerer dem i presentasjonssidene. Dette gir strengere krav til oppetid og skalerbarhet i kilden og dens WS, men gevinsten er at selve tjenesten blir mindre og mindre kostbar \u2013 man oppdaterer kildedata direkte uten mellomlagring og ekstra kompleksitet dette medf\xf8rer."),(0,s.kt)("h2",{id:"hvordan-skalet-api-i-en-ws-se-ut"},"Hvordan skal\xa0et API i en WS se ut?"),(0,s.kt)("h3",{id:"restful"},"RESTful"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Representational_state_transfer"},"REST"),"\xa0er en metodikk for \xe5 sikre l\xf8se koblinger mellom to tjenester i en integrasjon. Begrepet misbrukes ofte om integrasjoner som benytter HTTP som den underliggende protokollen for integrasjonen, men REST er ikke begrenset til HTTP og m\xe5 ikke bygges over HTTP. For \xe5 sikre at man ikke videref\xf8rer gamle, tett koblede integrasjoner i den nye integrasjonsarkitekturen, b\xf8r tjenesteeiere og -utviklere etterstrebe \xe5 lage grensesnitt som er s\xe5 RESTfulsom mulig."),(0,s.kt)("p",null,"S\xe5 hva er RESTful? Det kan deles inn i fire niv\xe5er, der det er opp til tjenesteeier\xa0og -utvikler \xe5 bestemme hvor RESTful API-et skal v\xe6re. Anbefalt minimumsniv\xe5 er niv\xe5 2."),(0,s.kt)("h4",{id:"niv\xe5-0-rpc-over-http"},"Niv\xe5 0: RPC over HTTP"),(0,s.kt)("p",null,"P\xe5 dette niv\xe5et ligger REST API-er som ikke egentlig er REST. Man har implementert typiske ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Remote_procedure_call"},"RPC"),"-kall over HTTP og kaller dette REST. Det resulterende API-et blir spesialisert og lite gjenbrukbart. Typisk fors\xf8ker man \xe5 tilby funksjonalitet i API-et tatt helt bokstavlig fra en bestilling. \xd8nsker konsument en \xe5 hente fornavn p\xe5 en person s\xe5 lager man en funksjon for dette. Konsument to \xf8nsker hele navnet s\xe5 da lager man en ny funksjon. Konsument tre \xf8nsker en liste med alle navnetyper, samt muligheten til \xe5 oppdatere navn s\xe5 da lages det flere funksjoner for alt dette. Man ender opp med tette koblinger og lite til ingen gjenbruk.\xa0"),(0,s.kt)("h4",{id:"niv\xe5-1-ressurser"},"Niv\xe5 1: Ressurser"),(0,s.kt)("p",null,"P\xe5 niv\xe5 1 begynner man \xe5 omfavne RESTful. Isteden for spesialiserte kall for enhver handling som omhandler en ressurs eller entitet s\xe5 samler man disse i en felles ressurs. I eksemplet med navn p\xe5 en person fra niv\xe5 0 s\xe5 samler man navn under ",(0,s.kt)("strong",{parentName:"p"},"persons/mathiasm/names*"),".*Under dette omr\xe5det samler man de funksjoner som omhandler navn. Dette er en bedre l\xf8sning enn i niv\xe5 0, men fortsatt utsatt for spesialiserte funksjoner og manglende gjenbruk. Det oppfordrer dog til en ressursdrevet (datadrevet) modell der ressurser i form av data bestemmer mer av strukturen p\xe5 API-et heller enn en mer tilfeldig modell basert p\xe5 hvem som spurte om hva n\xe5r."),(0,s.kt)("h4",{id:"niv\xe5-2-http-verb"},"Niv\xe5 2: HTTP verb"),(0,s.kt)("p",null,"P\xe5 dette niv\xe5et har API-et modnet betraktelig. Om man implementerer et niv\xe5 2 API s\xe5 er ikke API-et fullt ut RESTful, men det er likevel av en slik kvalitet at det oppfyller kravene fra integrasjonsarkitekturen. Det vil v\xe6re modul\xe6rt, datadrevet og gjenbrukbart. Som\xa0de tidligere eksemplene med personnavn s\xe5 vil HTTP-verbet bestemme operasjonen man gj\xf8r p\xe5 navn.\xa0",(0,s.kt)("strong",{parentName:"p"},"GET persons/mathiasm/names")," vil gi en liste URL-er med de navn som er registrert for personen 'mathiasm'. GET p\xe5 en av disse vil gi denne typen navn. En endring eller sletting gj\xf8res med HTTP-verbene DELETE, POST\xa0eller PUT. Behovet for spesialiserte funksjoner blir minimalt da dataene selv representeres som ressurser og man kan lese og skrive til disse ressursene."),(0,s.kt)("h4",{id:"niv\xe5-3hypermedia-controlshateoas"},"Niv\xe5 3:\xa0Hypermedia Controls/HATEOAS"),(0,s.kt)("p",null,"For et ekte RESTful API s\xe5 skal API-et i WS-en v\xe6re den kontrollerende akt\xf8ren i integrasjonen. Dette vil si at i eksemplet med navn s\xe5 vil utseendet p\xe5 API-et endre seg i forhold til kontekst. For konsument 1, som kun skal hente fornavn p\xe5 personer, s\xe5 viser API-et kun dette. For konsument 3, som \xf8nsker alle navnetyper, samt mulighet til \xe5 oppdatere navn, s\xe5 vil kallet som returnerer listen ogs\xe5 inkludere lenker til hvordan konsumenten kan oppdatere navn. For de navn som ikke finnes vil det bli sendt med lenker til hvor konsumenten kan opprette disse navnene. API-et gir fra seg informasjon om tilstanden p\xe5 data og tilgangene konsumenten har til data. Dette gir navn til det velklingende akronymet\xa0",(0,s.kt)("strong",{parentName:"p"},"HATEOAS")," (Hypertext As The Engine Of Application State).\xa0"),(0,s.kt)("p",null,"\xc5 implementere et\xa0ekte RESTful API er ressurskrevende. Det er uklart om steget fra niv\xe5 2 til 3 er verdt den ekstra innsatsen."),(0,s.kt)("h3",{id:"entitetsbasert-api"},"Entitetsbasert API"),(0,s.kt)("p",null,"Entitet- eller ressursbasert, som nevnt under niv\xe5 1 under RESTful, handler om \xe5 bevege seg bort fra ",(0,s.kt)("strong",{parentName:"p"},"operasjonen"),"\xa0man skal gj\xf8re og heller se p\xe5\xa0",(0,s.kt)("strong",{parentName:"p"},"data"),"\xa0man skal gj\xf8re noe med. Mange uttrekk og funksjoner i dag er\xa0resultatet av at man skal gj\xf8re noe bestemt. Konsumenter trenger sammensatte uttrekk fra konsumenter og skal ikke ha for mye eller for lite data. Dataene skal formateres p\xe5 bestemte m\xe5ter og sv\xe6rt sjeldent kan to ulike konsumenter benytte de samme uttrekkene."),(0,s.kt)("p",null,"\xc5 si at API-er skal v\xe6re entitetsbaserte (evt. ressursbaserte) vil si at man heller eksponerer typiske entiteter fra kilden heller enn ferdige uttrekk. Om en konsument trenger informasjon om ansatte og deres organisasjonstilh\xf8righet s\xe5 kan dette realiseres med entitetene\xa0",(0,s.kt)("em",{parentName:"p"},"employees"),"og\xa0",(0,s.kt)("em",{parentName:"p"},"organisational units"),". Relasjonen mellom den ansatte og organisasjon realiseres som attributter i en eller begge entiteter. Det er opp til eiere, forvaltere og utviklere for en kilde om hva som er en entitet eller ressurs. Eksempelvis kan man si at en brukerkonto er en entitet, mens et brukernavn kun er et attributt ved denne brukerkontoen. En gruppe er en entitet, mens gruppenavnet og medlemskap er attributter til gruppen."),(0,s.kt)("p",null,"Slike kolleksjoner av entiteter eller ressurser vil ikke gi den skredders\xf8mmen som vi til vanlig har tilbudt. Det er n\xe5 opp til konsumenten \xe5 selv filtrere og sl\xe5 sammen data, men kilden tilbyr n\xe5 verkt\xf8yene for at konsumenter kan f\xe5 data.\xa0"),(0,s.kt)("p",null,"For funksjoner som aldri kan v\xe6re datadrevne \u2013\xa0 som start/stopp-funksjonalitet \u2013 er det opp til tjenesteeier for hvordan man realiserer dette."),(0,s.kt)("h3",{id:"funksjonelt-api"},"Funksjonelt API"),(0,s.kt)("p",null,"Et funksjonelt API, til forskjell fra ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Functional_programming"},"funksjonell programmering"),", omhandler at designet av API-et skal v\xe6re forst\xe5elig og brukbart\xa0for utenforst\xe5ende. Utviklere av konsumenter sitter ikke med den domenekunnskapen som de som jobber med en kilde gj\xf8r. Dette betyr at API-er inn mot kilder b\xf8r forenkles slik at de gir mening for utenforst\xe5ende, men ikke mer enn at informasjon som er n\xf8dvendig for konsumenter g\xe5r tapt."),(0,s.kt)("p",null,'Et eksempel kan v\xe6re den aktive studentmassen p\xe5 UiO. Ulike konsumenter kan v\xe6re interessert i ulike mengder studenter slik at API-et m\xe5 gi et rikt utplukk studenter, men konsumentene vet ikke reglene som omhandler betalt semesteravgift, oppmeldt studieprogram eller enkeltemne, samt andre regler som bestemmer om studenter regnes som "aktive" studenter. API-et kunne realiseres som enten \xe5 ha et attributt som sier "aktiv" p\xe5 ressursen student, eller eksponere alle tilh\xf8rende databasestrukturer\xa0som avgj\xf8r om studenten er aktiv i andre enden av skalaen. Sannsynligvis ligger den beste l\xf8sningen et sted i midten, der man b\xf8r eksponere mye av de tilh\xf8rende data, men p\xe5 en slik m\xe5te at konsumenten kan forst\xe5 informasjonen heller enn \xe5 l\xe6re seg de interne strukturene i kilden.'))}u.isMDXComponent=!0},934:function(e,t,n){t.Z=n.p+"assets/images/api-tilgang-835639dd5dd1efdbfe267a8ed5868bb2.png"},4864:function(e,t,n){t.Z=n.p+"assets/images/api-tilgang2-63ec649013a570f748f2341e0c1b95e3.png"},9908:function(e,t,n){t.Z=n.p+"assets/images/datalager-7a148c7f255482d72e1b8b8a14c37025.png"},6866:function(e,t,n){t.Z=n.p+"assets/images/hub-forklart-52d262e871601624628043e2b051502d.png"},7832:function(e,t,n){t.Z=n.p+"assets/images/mq-flyt-d61a42ce065ae6cd07265e1b786e6561.png"},2456:function(e,t,n){t.Z=n.p+"assets/images/ws-api-26664470ed7580077a1124c6c649b42d.png"},1800:function(e,t,n){t.Z=n.p+"assets/images/ws-forklart-cf592fdf5080d788babbbc4fed9e21a9.png"},533:function(e,t,n){t.Z=n.p+"assets/images/ws-mq-sirkel-4bd045e962bb27a031ce3cb8a351aca0.png"}}]);