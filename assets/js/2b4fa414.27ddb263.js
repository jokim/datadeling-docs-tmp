"use strict";(self.webpackChunkprod=self.webpackChunkprod||[]).push([[3596],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),k=d(n),u=a,v=k["".concat(l,".").concat(u)]||k[u]||g[u]||i;return n?r.createElement(v,s(s({ref:t},m),{},{components:n})):r.createElement(v,s({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=k;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2772:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return g}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),s=["components"],o={author:["Einar Jerpseth"],title:"Web Services for Dummies"},l="Web Services for Dummies",d={unversionedId:"datadeling/veiledere/annet/anskaffelse/webservicefordummies",id:"datadeling/veiledere/annet/anskaffelse/webservicefordummies",title:"Web Services for Dummies",description:"Vi vet ikke hvilke tjenester vi trenger i fremtiden, men vi ser at endringstakten \xf8ker, og IT-tjenester blir stadig mer integrert. Det er derfor viktig \xe5 tenke p\xe5 fremtidige kostnader, dvs. at i ROS- og kost/nytte-analyser b\xf8r man legge inn et godt slingringsmonn for at IT-tjenesten skal ha endringsevne. Man skal kunne endre, s\xe5gar skifte ut, programvaren uten at dette utl\xf8ser store kostnader, heller ikke i andre deler av virksomheten.",source:"@site/docs/datadeling/veiledere/annet/anskaffelse/webservicefordummies.md",sourceDirName:"datadeling/veiledere/annet/anskaffelse",slug:"/datadeling/veiledere/annet/anskaffelse/webservicefordummies",permalink:"/datadeling-docs-tmp/docs/datadeling/veiledere/annet/anskaffelse/webservicefordummies",editUrl:"https://github.com/jokim/datadelingsdokumentasjon/tree/master/docs/datadeling/veiledere/annet/anskaffelse/webservicefordummies.md",tags:[],version:"current",frontMatter:{author:["Einar Jerpseth"],title:"Web Services for Dummies"},sidebar:"tutorialSidebar",previous:{title:"Trelagsarkitektur",permalink:"/datadeling-docs-tmp/docs/datadeling/veiledere/annet/anskaffelse/trelagsarkitektur"},next:{title:"F\xe5 tilgang til et API",permalink:"/datadeling-docs-tmp/docs/datadeling/veiledere/api-manager/api-manager-be-om-tilgang"}},m={},g=[],k={toc:g};function u(e){var t=e.components,o=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},k,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"web-services-for-dummies"},"Web Services for Dummies"),(0,i.kt)("p",null,"Vi vet ikke hvilke tjenester vi trenger i fremtiden, men vi ser at endringstakten \xf8ker, og IT-tjenester blir stadig mer integrert. Det er derfor viktig \xe5 tenke p\xe5 fremtidige kostnader, dvs. at i ROS- og kost/nytte-analyser b\xf8r man legge inn et godt slingringsmonn for at IT-tjenesten skal ha endringsevne. Man skal kunne endre, s\xe5gar skifte ut, programvaren uten at dette utl\xf8ser store kostnader, heller ikke i andre deler av virksomheten."),(0,i.kt)("p",null,"Tidligere har vi gjort programvarevalg som har gjort bytte av programvare veldig kostbart, f.eks. programvare for arkiv, l\xf8nn, regnskap, integrasjon, og studentsystem. I noen IT-tjenester med mange integrasjoner knyttet til seg, har vi v\xe6rt i en ",(0,i.kt)("em",{parentName:"p"},"lock in")," situasjon (Synkroniseringseffekt). I praksis betyr dette at programvaren ikke kan skiftes ut, fordi kostnadene ved skifte blir for store. Illustrasjonen under viser hvordan programvaren BAS leverer data til \xe5tte forskjellige konsumenter, d.v.s. mottagere av data. Hvis man byttet ut programvaren BAS, ville det utl\xf8se endringer, og dermed kostnader, i alle disse konsumentene. Og alle m\xe5 skifte til samme tid."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(6720).Z,width:"232",height:"208"})),(0,i.kt)("p",null,"For Cerebrum i dag har vi ikke \xe5tte konsumenter, som i tegningen, men 50+. Alle disse f\xe5r (har f\xe5tt) sine egne spesialtilpassende uttrekk (datasett). Ingenting kan gjenbrukes. Hvis det derimot hadde v\xe6rt et API mellom BAS og konsumentene, slik at  hver konsument hentet dataene de trengte og selv tilpasset den til sitt format, kunne man endret eller skiftet ut hele BAS uten at dette skapte endringer for noen av konsumentene."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(8959).Z,width:"232",height:"270"})),(0,i.kt)("p",null,"Mellom BAS (produsent/kildesystem) ser vi at det er kommet et API. Dette er tegnet inn med en hvit og en svart side. Den hvite siden, den konsumentene snakker med (de vet ikke om den svarte siden), beh\xf8ver ikke endres. Den svarte siden kan hente eller levere data til flere kildesystemer. Hvilke kildesystemer som kommuniseres med beh\xf8ver ikke konsumenten vite om. Heller ikke om den svarte siden benytter SQL, snakker med leverand\xf8rens egen (proriet\xe6re) WS, eller annet. Slik kan man s\xf8ml\xf8st og over en tidsperiode bytte ut BAS-programvaren, uten at dette medf\xf8rer planlegging, prioritering og koordinering med konsumentene."),(0,i.kt)("p",null,"Det er ikke alltid leverand\xf8rens WS tilbyr de data man \xf8nsker seg, og opp mot store skyleverand\xf8rer kan det v\xe6re umulig \xe5 f\xe5 dette implementert som en liten kunde. Derfor er det mange vurderinger som m\xe5 gj\xf8res mht. API n\xe5r IT-tjenester anskaffes. Den aller viktigste er: Skal man bygge, eller ha muligheten til \xe5 bygge, en egen WS? Dette virker kanskje som en uoverkommelig stor oppgave, men det finnes mange rammeverk i dag som gj\xf8r dette arbeidet veldig overkommelig. Det avhenger naturligvis om man bare skal tilby data, eller hvor rik funksjonalitet man \xf8nsker \xe5 tilby. Man kan kombinere: Lage en selvutviklet WS for dataene mange konsumenter benytter, og benytte leverand\xf8rens for de f\xe5 konsumentene med spesielle behov. Dette er vist i illustrasjonen under."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(6712).Z,width:"405",height:"322"})),(0,i.kt)("p",null,"Videre: Dersom IT-tjenesten kommer fra en leverand\xf8r med et WS API som tilfredsstiller de \xf8nsker vi har til utforming, kan man vurdere noen andre muligheter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Kan man lisens- og utviklingsmessig beholde og endre leverand\xf8rens API, selv om man bytter ut leverand\xf8rens bakenforliggende programvare?"),(0,i.kt)("li",{parentName:"ul"},"Skal man vente med \xe5 bygge en egen WS til man er i en situasjon hvor man skal skifte bakenforliggende programvare, og da bygge den selvlagde slik at det p\xe5 den hvite siden ser ut som leverand\xf8rens? Alts\xe5 slik at konsumentene ikke merker at man skifter API?")))}u.isMDXComponent=!0},8959:function(e,t,n){t.Z=n.p+"assets/images/ny-bas-5553b35fdfb73b771760ebb104b4f773.jpg"},6720:function(e,t,n){t.Z=n.p+"assets/images/old-push-567d9c0aff907ff760805fb99e6bfda1.jpg"},6712:function(e,t,n){t.Z=n.p+"assets/images/ws-kjope-bygge-59932b788d3da7fc02c3c2b70113ef65.jpg"}}]);