"use strict";(self.webpackChunkprod=self.webpackChunkprod||[]).push([[7527],{3905:function(e,t,r){r.d(t,{Zo:function(){return k},kt:function(){return p}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),d=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},k=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,k=i(e,["components","mdxType","originalType","parentName"]),g=d(r),p=a,f=g["".concat(o,".").concat(p)]||g[p]||m[p]||s;return r?n.createElement(f,l(l({ref:t},k),{},{components:r})):n.createElement(f,l({ref:t},k))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,l=new Array(s);l[0]=g;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<s;d++)l[d]=r[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},7298:function(e,t,r){r.r(t),r.d(t,{assets:function(){return k},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return m}});var n=r(3117),a=r(102),s=(r(7294),r(3905)),l=["components"],i={title:"Vurderinger ved anskaffelse av IT-tjenester og -systemer"},o=void 0,d={unversionedId:"datadeling/veiledere/annet/anskaffelse/detaljert",id:"datadeling/veiledere/annet/anskaffelse/detaljert",title:"Vurderinger ved anskaffelse av IT-tjenester og -systemer",description:"Som systemeier, prosjektleder, innkj\xf8per og applikasjonsforvalter er det flere aspekter ved integrasjonsarktitekturen man b\xf8r tenke gjennom f\xf8r produkt eller leverand\xf8r velges. Her diskuteres punkter ved integrasjoner som er verdt \xe5 ta med seg.",source:"@site/docs/datadeling/veiledere/annet/anskaffelse/detaljert.md",sourceDirName:"datadeling/veiledere/annet/anskaffelse",slug:"/datadeling/veiledere/annet/anskaffelse/detaljert",permalink:"/datadeling-docs-tmp/docs/datadeling/veiledere/annet/anskaffelse/detaljert",editUrl:"https://github.com/jokim/datadelingsdokumentasjon/tree/master/docs/datadeling/veiledere/annet/anskaffelse/detaljert.md",tags:[],version:"current",frontMatter:{title:"Vurderinger ved anskaffelse av IT-tjenester og -systemer"},sidebar:"tutorialSidebar",previous:{title:"Veileder for anskaffelser av IT-tjenester",permalink:"/datadeling-docs-tmp/docs/datadeling/veiledere/annet/anskaffelse/"},next:{title:"Galvanisk skille",permalink:"/datadeling-docs-tmp/docs/datadeling/veiledere/annet/anskaffelse/galvanisk-skille"}},k={},m=[{value:"Moderne og gammeldags programvare",id:"moderne-og-gammeldags-programvare",level:2},{value:"1. Provisjonering",id:"1-provisjonering",level:3},{value:"2. Integrasjonsteknologi",id:"2-integrasjonsteknologi",level:3},{value:"3. Galvanisk skille",id:"3-galvanisk-skille",level:3},{value:"4. Trelagsarkitektur",id:"4-trelagsarkitektur",level:3},{value:"Web Service for Dummies",id:"web-service-for-dummies",level:2},{value:"Sanntidsoppdatering",id:"sanntidsoppdatering",level:2},{value:"Masterdata, delte data og verdikjeder",id:"masterdata-delte-data-og-verdikjeder",level:2},{value:"Retrofit",id:"retrofit",level:2}],g={toc:m};function p(e){var t=e.components,i=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,n.Z)({},g,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Som systemeier, prosjektleder, innkj\xf8per og applikasjonsforvalter er det flere aspekter ved integrasjonsarktitekturen man b\xf8r tenke gjennom f\xf8r produkt eller leverand\xf8r velges. Her diskuteres punkter ved integrasjoner som er verdt \xe5 ta med seg."),(0,s.kt)("h2",{id:"moderne-og-gammeldags-programvare"},"Moderne og gammeldags programvare"),(0,s.kt)("p",null,"Det viktigste f\xf8rst: N\xe5r man kj\xf8per ferdig programvare, s\xe5kalt hyllevare, m\xe5 man aldri falle for fristelsen til \xe5 kj\xf8pe tjenester for \xe5 tilpasse programvaren til organisasjonen. Dette er alltid det dyreste valget. Disse tilpasningene vil medf\xf8re store merkostnader ved hver endring. Tilpass i stedet organisasjonens prosesser etter programvaren."),(0,s.kt)("p",null,"N\xe5r du som systemeier anskaffer programvare, s\xe5 er det gjerne programvare en bruker, et menneske, skal sitte \xe5 jobbe i. Med integrasjons\xf8yne er det da i hovedsak fire forhold som m\xe5 vurderes:"),(0,s.kt)("h3",{id:"1-provisjonering"},"1. Provisjonering"),(0,s.kt)("p",null,"At programvaren p\xe5 forh\xe5nd f\xe5r informasjon om sine brukere eller andre ressurser, som rom. Nesten alle kj\xf8pte webapplikasjoner med brukerinnlogging havner i denne kategorien, sammen med andre, som FS eller adgangskortsystemet. Vi er opptatt av om tjenesten kan oppdateres i sanntid eller ikke. Her snakker vi da om den kan f\xe5 eller avgi informasjon fra/til andre IT-tjenester kontinuerlig eller periodisk. Periodisk, typisk oppdatering en gang i d\xf8gnet, kaller vi for batch. Provisjonering kan ogs\xe5 skje manuelt ved at man taster inn navn, adresse eller lignende."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/provisjonering"},"Les mer om provisjonering her.")),(0,s.kt)("p",null,'Programvare som bygger en brukerkonto/-profil under f\xf8rste innlogging kalles gjerne "just in time provisjonering" (JIT). For moderne tjenester benyttes gjerne teknologier som billetteknologier, f. eks. OpenID Connect (OIDC) og SAML. Informasjonen programvaren trenger for bygge brukerprofilen ligger i billetten (adgangstegnet) fra innloggingstjenesten (FEIDE o.l.), i tillegg kan informasjon i billetten brukes for \xe5 finne mer informasjon om identiteten/entiteten i et oppslagsverk, f.eks. en web service. Til dette kan tjenesten f.eks. benytte teknologien OAuth.'),(0,s.kt)("p",null,"Integrasjonsmessig kan JIT virke fordelaktig, men ogs\xe5 her er det fallgruver. F.eks. skjer det ofte at JIT-tjenester bare bygger en veldig tynn profil, og at brukeren manuelt m\xe5 registrere resten av sine data. Det er ofte sv\xe6rt begrenset med informasjon som ligger i en billett. Ofte benyttes flere provisjoneringsmetoder i samme IT-tjeneste, f.eks. at rapportdata synkroniseres batch, mens brukerdata (f.eks. adresse eller telefonnummer) oppdateres umiddelbart (n\xe5r det skiftes i en tjeneste til alle affekterte tjenester). For eldre typer teknologi, det vi gerne kaller legacy-teknologier, benyttes gjerne katalogtjenester som AD eller LDAP i stedet."),(0,s.kt)("h3",{id:"2-integrasjonsteknologi"},"2. Integrasjonsteknologi"),(0,s.kt)("p",null,'Filoverf\xf8ringer og databasesp\xf8rringer vil hovedsak alltid regnes som gammeldags ("legacy"), men web service er ikke nok i seg selv. Vanligvis foretrekker vi en retning innen web services som kalles RESTful. Denne retningen har sin styrke i \xe5 v\xe6re intuitiv, man kan lete seg frem til data man trenger, og beh\xf8ver liten eller ingen kunnskap om kommandoord eller argumenter.'),(0,s.kt)("p",null,'TODO: Oppdater dette etter at "utforming av API" er klar.'),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/integrasjonsteknologi"},"Les mer om integrasjonsteknologi")),(0,s.kt)("h3",{id:"3-galvanisk-skille"},"3. Galvanisk skille"),(0,s.kt)("p",null,"Et tredje kriterie man kan rette seg etter for \xe5 bed\xf8mme hvor moderne en IT-tjeneste/programvare er, er om man gj\xf8r innlogging i operativsystemet, eller i applikasjonen. Om operativsystemet vet hvem du er eller ikke, kaller vi et galvanisk skille."),(0,s.kt)("p",null,"Forenklet sagt: Styr unna tjenester som gj\xf8r innlogging i operativsystemet."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/galvanisk-skille"},"Les mer om galvanisk skille")),(0,s.kt)("h3",{id:"4-trelagsarkitektur"},"4. Trelagsarkitektur"),(0,s.kt)("p",null,"Trelagsarkitektur inneb\xe6rer at man kan benytte (helst valgfri) funksjonalitet fra en IT-tjeneste i en annen, f.eks. For Ansatte eller Mine Studier."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/trelagsarkitektur"},"Les mer om trelagsarkitektur"),"."),(0,s.kt)("p",null,"Kort oppsummert gir dette en matrise med noen stikkord som kan si oss noe om hvor moderne en applikasjon er, spesielt med henhold til om den er tiltenkt store brukermasser med homogene behov. De fleste applikasjoner har trekk fra b\xe5de raden 'Moderne' og raden 'Gammeldags'."),(0,s.kt)("p",null,"|  | Provisjonert | API | Autentisering | Applikasjons-"),(0,s.kt)("p",null,"oppbygning"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null}))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Moderne"),(0,s.kt)("td",{parentName:"tr",align:null},"Sanntidsoppdatering"),(0,s.kt)("td",{parentName:"tr",align:null},"RESTful WS og meldingsk\xf8"),(0,s.kt)("td",{parentName:"tr",align:null},"SAML / OIDC / Oauth"),(0,s.kt)("td",{parentName:"tr",align:null},"L\xf8st koblet trelagsarkitektur (med hendelser)")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Gammeldags"),(0,s.kt)("td",{parentName:"tr",align:null},"Batch (eller manuell)"),(0,s.kt)("td",{parentName:"tr",align:null},'SOAP, filoverf\xf8ring, systembruker, SQL, RSS, "REST-rpc"'),(0,s.kt)("td",{parentName:"tr",align:null},"Benytter katalogtjenester som AD og LDAP til autentisering og/eller autorisasjon"),(0,s.kt)("td",{parentName:"tr",align:null},"To lagsarkitektur, eller programvare med tette koblinger")))),(0,s.kt)("h2",{id:"web-service-for-dummies"},"Web Service for Dummies"),(0,s.kt)("p",null,"Web Services (WS) er en type API (integrasjonsgrensesnitt). Det er noe programvare benytter for \xe5 sende informasjon mellom seg, og ikke direkte mellom bruker og programvare. Vi som driver med integrasjonsarkitektur liker alts\xe5 WS. WS er de facto standard for utveksling av informasjon p\xe5 internett i dag, og tilbyr det nyeste innen sikkerhet og funksjonalitet."),(0,s.kt)("p",null,"Som nevnt er web service en sekkebetegnelse. N\xe5r man vurderer programvare er det ikke nok at leverand\xf8ren forsikrer om at programvaren har web services. Det kan enn\xe5 v\xe6re mange hindringer i veien: Lisenser, dokumentasjon, spesialkompetanse, propriet\xe6re formater osv. Vi ser stadig WS-er utformet for politiske form\xe5l. Selgeren reklamerer med WS, men den viser seg bare \xe5 v\xe6re pynt for \xe5 sikre et salg."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/webservicefordummies"},"Les mer om Web Services")),(0,s.kt)("h2",{id:"sanntidsoppdatering"},"Sanntidsoppdatering"),(0,s.kt)("p",null,"Det finnes flere sanntidsteknologier, men den vi har valgt i IntArk bruker Meldingsk\xf8 (MQ). Illustrasjonen under viser informasjonsflyten. Teknisk implementasjon krever langt flere komponenter."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",src:r(5351).Z,width:"836",height:"307"}),"\nEn hendelse skjer i kildesystemet (produsent). Produsenten sender en melding til meldingsk\xf8en. Der lagres den i en k\xf8 spesiell for hver konsument. I meldingen er det en internettadresse til hvor informasjonsobjektet er \xe5 finne i en WS. Konsumenten har en liten klient som lytter p\xe5 meldingsk\xf8en. Konsumenten avgj\xf8r om meldingen har relevans for seg. Den henter meldingen og finner informasjonsobjektet i WS. Den sjekker s\xe5 med sin eksisterende informasjon hva som er endret og oppdaterer egen informasjon."),(0,s.kt)("p",null,"Med meldingsk\xf8 kan mange konsumenter f\xe5 den samme meldingen. Alle som har en meldingsk\xf8 kan f\xe5 oppdatert sine data umiddelbart, n\xe5r data endres i datakilden. Meldingsk\xf8en holder (for hver k\xf8) p\xe5 meldingen til k\xf8ens konsument har hentet meldingen. Verdien til meldingsk\xf8er er alts\xe5 lett \xe5 se: Alle IT-tjenester (som benytter tjenesten) vil ha konsistente data umiddelbart."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/sanntidsoppdatering"},"Les mer om sanntidsoppdatering")),(0,s.kt)("h2",{id:"masterdata-delte-data-og-verdikjeder"},"Masterdata, delte data og verdikjeder"),(0,s.kt)("p",null,"Et sp\xf8rsm\xe5l som reises n\xe5r man forteller om meldingsk\xf8 er om man da kan skifte sine data i et hvilket som helst system, og s\xe5 vil dette reflekteres i alle system. Svaret er at dette er kompleksitet vi ikke klarer \xe5 h\xe5ndtere. Derimot kan man gj\xf8re det fra et hvilket som helst presentasjonslag, som mobil-app eller nettleser, s\xe5 lenge de benytter samme datalager i bakgrunnen. For \xe5 klare h\xe5ndtere kompleksiteten m\xe5 en IT-tjeneste v\xe6re autoritativ. Det er en bestemmelse som gj\xf8res utenfor IT. Man bestemmer at dersom data ikke er like i to datakilder, er det den ene kilden som gjelder, uavhengig av hvor data ble endret sist."),(0,s.kt)("p",null,"Hvilke datakilder som er autoritative for hvilke data kan variere, men det m\xe5 v\xe6re bestemt p\xe5 forh\xe5nd. De data en IT-tjeneste er autoritative for, kalles autoritative data. Man skal helst hente data fra autoritativ kilde, men dersom dette ikke er hensiktsmessig, skal dataene ikke endres p\xe5 veien. Typiske eksempler er programvare som henter data fra katalogtjenester som AD og LDAP. TBD: Her er Feide ogs\xe5 en tredjepart, som i system-til-system-integrasjonar er frar\xe5det, men for sluttbrukerintegrasjoner b\xf8r vi kanskje omformulere oss."),(0,s.kt)("p",null,"Ved anskaffelser m\xe5 det v\xe6re tydelig p\xe5 forh\xe5nd hvilke data tjenesten som anskaffes skal v\xe6re autoritativ for, og hvilke data som skal hentes fra andre kilder. De fleste IT-tjenester har langt mer autoritative data enn det de andre konsumentene har behov for. Ofte benyttes derfor begrepet masterdata om dataen tjenesten er autoritativ for og deler med andre tjenester. Men hva man deler fra dag \xe9n, og hva som skal deles i fremtiden, er ikke alltid lett \xe5 forutsi."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/masterdata-verdikjeder"},"Les mer om masterdata og verdikjeder")),(0,s.kt)("h2",{id:"retrofit"},"Retrofit"),(0,s.kt)("p",null,"Hva om min foretrukne skytjeneste eller programvare ikke har MQ og RESTful services? Hva om den snakker SOAP og RSS? Benytter systembruker? I en del tilfelle kan du f\xe5 noen til \xe5 lage en mikrotjeneste som oversetter. Vi gj\xf8r iblant grep for \xe5 f\xe5 gammel teknologi til \xe5 fungere med ny teknologi. Et slikt grep kalles en retrofit. Dette gj\xf8r at vi har et st\xf8rre utvalg av IT-tjenester \xe5 velge mellom, men husk at en slik retrofit har en kostnad, b\xe5de i utvikling og videre drift og forvaltning."))}p.isMDXComponent=!0},5351:function(e,t,r){t.Z=r.p+"assets/images/ia-diamond-89c550297b81b38d9d2f2c0a82d45342.jpg"}}]);